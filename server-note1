博客:
不要在最该奋斗的年纪选择安逸------一个热衷于PHP开发的90后
http://blog.csdn.net/qq_28602957/article/details/53504737

Swoole是一个php的扩展，它的核心目的就是解决php在实现server服务中可能遇到的一系列问题，这些问题用源生的php往往并不能很高效（执行效率）的解决，一般也不会使用php来解决，所以会有说swolle重新定义的php的说法。
其实swoole也提供了一个框架，swoole framework是基于swoole extension设计的一个框架，要用好这个框架，还是要先了解swoole extension。
扩展的英文名称是Extension，php扩展是用C语言作为开发语言，基于Zend引擎提供的API，编译成的一个动态库。

在php的配置文件中配置好extension的属性后，就可以引用这个动态库了。
也就是说，swoole本身是用C语言编写的，它可以让php获得一些额外的function。
然后是运行方式，swoole的许多功能都只能运行在cli模式下，而cli模式往往是很多刚接触swoole的phper遇到的第一个问题

/usr/local/bin/php hello_cli.php
默认情况下，php都会被安装在了$PATH的目录下，那就可以直接省略路径前缀了，下文中调用php的时候，全都省略了路径前缀。
因为swoole是pecl的项目，所以使用pecl安装是最简单的方法，强烈推荐第一次接触的童鞋先使用pecl安装，在熟悉了swoole之后，再考虑使用编译安装的方式以获取更多进阶功能。

pecl这个工具基本都会被安装在与php相同的目录下（往往也都是$PATH目录）
pecl install swoole
执行以下命令查看是否安装成功：
php -m | grep swoole
> swoole
如果正确的输出了swoole，那么恭喜你，这次安装很成功


---------------------
学习swoole需要哪些知识？

多进程/多线程

了解Linux操作系统进程和线程的概念
了解Linux进程/线程切换调度的基本知识
了解进程间通信的基本知识，如管道、UnixSocket、消息队列、共享内存
socket

了解SOCKET的基本操作如accept/connect、send/recv、close、listen、bind
了解SOCKET的接收缓存区、发送缓存区、阻塞/非阻塞、超时等概念
IO复用

了解select/poll/epoll
了解基于select/epoll实现的事件循环，Reactor模型
了解可读事件、可写事件
TCP/IP网络协议

了解TCP/IP协议
了解TCP、UDP传输协议
调试工具

使用gdb调试Linux程序
使用strace跟踪进程的系统调用
使用tcpdump跟踪网络通信过程
其他Linux系统工具，如ps、lsof、top、vmstat、netstat、sar、ss等

------------------------------------

以下是
官方swoole文档
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
server/
事件回调函数：swoole_server是事件驱动模式，所有的业务逻辑代码必须写在事件回调函数中。当特定的网络事件发生后，swoole底层会主动回调指定的PHP函数。
             swoole中共支持13种事件
事件执行顺序：
                所有事件回调均在$server->start后发生
                
                服务器关闭程序终止时最后一次事件是onShutdown
                
                服务器启动成功后，onStart/onManagerStart/onWorkerStart  会在  不同的进程内  并发执行。  
                                                                      注意：onStart/onManagerStart/onWorkerStart 3个事件的执行顺序是不确定的
                
                onReceive/onConnect/onClose/onTimer  在worker进程(包括task进程)中  各自触发
                
                worker/task进程启动/结束时 会分别调用onWorkerStart/onWorkerStop
                
                onTask事件仅在task进程中发生
                
                onFinish事件仅在worker进程中发生

异常捕获：
swoole不支持 set_exception_handler函数
如果你的PHP代码有抛出异常逻辑，必须在事件回调函数顶层进行try/catch来捕获异常

